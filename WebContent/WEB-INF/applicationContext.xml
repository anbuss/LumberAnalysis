<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
       default-lazy-init="true">

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>/WEB-INF/mail.properties</value>
            </list>
        </property>
    </bean>
    <!-- =================================================================== -->
    <!-- AOP: Configuration and Aspects                                      -->
    <!-- =================================================================== -->
    <aop:config>
        <aop:advisor id="userManagerTx" advice-ref="userManagerTxAdvice" pointcut="execution(* *..service.UserManager.*(..))" order="0"/>
        <aop:advisor id="userManagerSecurity" advice-ref="userSecurityAdvice" pointcut="execution(* *..service.UserManager.saveUser(..))" order="1"/>
        <aop:advisor id="managerTx" advice-ref="txAdvice" pointcut="execution(* *..service.*Manager.*(..))" order="2"/>
    </aop:config>









    <bean id="maintenanceServiceBean" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <value>com.lumberanalysis.*,com.logviewer.*</value>
        </property>
        <property name="interceptorNames">
            <list>
                <value>loggingInterceptor</value>
            </list>
        </property>
    </bean>
    <bean id="loggingInterceptor" class="com.lumberanalysis.interceptor.LoggingInterceptor"/>




    <!-- Enable @Transactional support -->
    <tx:annotation-driven/>

    <bean
        class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <entry key="view">
                    <bean class="com.lumberanalysis.webapp.jsf.ViewScope" />
                </entry>
            </map>
        </property>
    </bean>
    <!-- Enable @AspectJ support -->
    <aop:aspectj-autoproxy/>

    <!-- Activates scanning of @Autowired -->
    <context:annotation-config/>

    <!-- Activates scanning of @Service -->
    <context:component-scan base-package="com.lumberanalysis.*"/>
   
    <tx:advice id="txAdvice">
        <tx:attributes>
            <!-- Read-only commented out to make things easier for end-users -->
            <!-- http://issues.appfuse.org/browse/APF-556 -->
            <!--tx:method name="get*" read-only="true"/-->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <tx:advice id="userManagerTxAdvice">
        <tx:attributes>
            <tx:method name="save*" rollback-for="UserExistsException"/>
        </tx:attributes>
    </tx:advice>

    <bean id="securityFilter" class="org.springframework.security.web.FilterChainProxy">
        
    </bean>

    <bean id="userSecurityAdvice" class="com.lumberanalysis.service.UserSecurityAdvice"/>
    <bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"/>

    <!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/loginapp"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
        <property name="maxActive" value="100"/>
        <property name="maxWait" value="1000"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="defaultAutoCommit" value="true"/>
    </bean> -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="jdbc:h2:D:/Online/anbu.ss/Google/project/Latest/LogViewer/loginapph2DB;AUTO_SERVER=TRUE"/>
        <property name="username" value="sa"/>
        <property name="password" value=""/>
        <property name="maxActive" value="100"/>
        <property name="maxWait" value="1000"/>
        <!-- <property name="hibernate.hbm2ddl.auto" value="create" /> -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="defaultAutoCommit" value="true"/>
    </bean> 
    
  <!--   <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="org.apache.derby.jdbc.ClientDriver"/>
        <property name="url" value="jdbc:derby://localhost:1527/loginapp"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
        <property name="maxActive" value="100"/>
        <property name="maxWait" value="1000"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="defaultAutoCommit" value="true"/>
    </bean>  -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>


    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=org.hibernate.dialect.MySQLDialect
                hibernate.query.substitutions=true 'Y', false 'N'
                hibernate.cache.use_second_level_cache=true
                hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
               <!-- hibernate.hbm2ddl.auto=create -->
            </value>
            <!-- Turn batching off for better error messages under PostgreSQL -->
            <!-- hibernate.jdbc.batch_size=0 -->
        </property>
    </bean> 
<!--
<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=org.hibernate.dialect.DerbyDialect
                hibernate.query.substitutions=true 'Y', false 'N'
                hibernate.cache.use_second_level_cache=true
                hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
              -->   <!-- hibernate.hbm2ddl.auto=create -->
        <!--    </value>           
        </property>
    </bean>  -->
    
    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>


    <!--  Make the top-level backing bean. This can also be created
        in faces-config.xml. See the commented-out entry there. If
        you did it that way, you would comment out the entry below. -->
    <!--<bean id="formBean"
          class="coreservlets.CustomerBackingBean"
          scope="request">
        <property name="lookupService" ref="sampleLookupService"/>
        <property name="colorPreferences" ref="colorPreferences"/>
    </bean>
    <bean id="userManager" class="com.lumberanalysis.service.impl.UserManagerImpl" autowire-candidate="true">
        <property name="userDao" ref="com.lumberanalysis.dao.UserDao"/>
    </bean> -->
 
    <bean id="loginCheck" class="com.lumberanalysis.webapp.action.usermanagement.LoginCheck" scope="session">
        <property name="userManager" ref="userManager"/>
        <property name="username" value=""/>
     <!--  <property name="userMap">
            <map>
                <entry key="rod" value="Tulika" ></entry>
            </map>
        </property> -->
        <property name="mailEngine" ref="mailEngine"/>

    </bean> 
    
  <!--   <bean id="regBean" class="com.lumberanalysis.webapp.action.SignupForm" scope="session">
        <property name="userManager" ref="userManager"/>
        <property name="mailEngine" ref="mailEngine"/>
    </bean>
    
    <bean id="userDao" class="com.lumberanalysis.dao.hibernate.UserDaoHibernate" scope="session">
    </bean> -->
    
    <!-- =================================================================== -->
    <!-- Mail: Sender and Velocity configuration                             -->
    <!-- =================================================================== -->
    <bean id="mailEngine" class="com.lumberanalysis.service.MailEngine">
        <property name="mailSender" ref="mailSender"/>
        <!--<property name="velocityEngine" ref="velocityEngine"/>-->
        <property name="from" value="${mail.default.from}"/>
    </bean>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.host}"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- Uncomment if you need to authenticate with your SMTP Server -->
        <property name="username" value="${mail.username}"/>
        <property name="password" value="${mail.password}"/>
        <!--<property name="javaMailProperties">-->
        <!--<value>-->
        <!--mail.smtp.auth=true-->
        <!--</value>-->
        <!--</property&ndash;&gt;-->
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${mail.auth}</prop>
                <prop key="mail.smtp.socketFactory.port">${mail.smtp.socketFactory.port}</prop>
                <prop key="mail.smtp.socketFactory.class">${mail.smtp.socketFactory.class}</prop>
                <prop key="mail.smtp.socketFactory.fallback">${mail.smtp.socketFactory.fallback}</prop>
                <prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</prop>
            </props>
        </property>
    </bean>

    <!--   Configure Velocity for sending e-mail
    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="velocityProperties">
            <props>
                <prop key="resource.loader">class</prop>
                <prop key="class.resource.loader.class">
                    org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
                </prop>
                <prop key="velocimacro.library"></prop>
            </props>
        </property>
    </bean>-->

    <bean id="mailMessage" class="org.springframework.mail.SimpleMailMessage" scope="prototype">
        <property name="from" value="${mail.default.from}"/>
    </bean>
    
    

    <!-- Cron Trigger, run every 5 seconds -->
   <!-- <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="LoadJob" />
        <property name="cronExpression" value="0/1 * * * * ?" />
    </bean>

    <bean name="LoadJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.lumberanalysis.webapp.schedule.LoadJob" />
    </bean>
    
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="cronTrigger"/>
            </list>
        </property>
        <property name="configLocation" value="classpath:quartz.properties"/>
       <property name="startupDelay" value="90" />
        <property name="applicationContextSchedulerContextKey">
            <value>applicationContext</value>
        </property>
    </bean> -->
    
</beans>
